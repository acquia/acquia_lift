<?php
/**
 * @file
 * Provides an agent for doing fixed targeting.
 */

class AcquiaLiftTarget extends PersonalizeAgentBase implements PersonalizeExplicitTargetingInterface, PersonalizeAgentGoalInterface {

  /**
   * Implements PersonalizeAgentInterface::create().
   */
  public static function create($agent_data) {
    $status = personalize_agent_get_status($agent_data->machine_name);
    return new self($agent_data->machine_name, $agent_data->label, $agent_data->data, $status, !empty($agent_data->started) ? $agent_data->started : NULL);
  }

  /**
   * Implements PersonalizeExplicitTargetingInterface::explicitTargetingSupportMultiple().
   */
  public static function explicitTargetingSupportMultiple() {
    return PersonalizeExplicitTargetingInterface::EXPLICIT_TARGETING_MULTIPLE_BOTH;
  }

  /**
   * Implements PersonalizeAgentInterface::getType().
   */
  public function getType()
  {
    return 'acquia_lift_target';
  }

  /**
   * Implements PersonalizeAgentInterface::getAssets().
   */
  public function getAssets() {
    return array(
      'js' => array(
        drupal_get_path('module', 'acquia_lift') . '/js/acquia_lift.js' => array('type' => 'file', 'scope' => 'footer', 'defer' => TRUE),
        drupal_get_path('module', 'acquia_lift') . '/js/acquia_lift_target.js' => array('type' => 'file', 'scope' => 'footer', 'defer' => TRUE),
      )
    );
  }

  /**
   * Implements PersonalizeAgentInterface::convertContextToFeatureString().
   */
  public static function convertContextToFeatureString($name, $value, $is_mutex = FALSE) {
    $value = self::cleanFeatureValue($value);
    return $name . '::' . $value;
  }

  /**
   * Implements PersonalizeAgentInterface::supportsMVTs().
   */
  public function supportsMVTs() {
    return TRUE;
  }

  /**
   * Implements PersonalizeAgentInterface::supportsMultipleDecisionPoints().
   */
  public function supportsMultipleDecisionPoints() {
    // We don't really, but at the time of option set creation, decision point
    // names cannot be set.
    return TRUE;
  }

  /**
   * Implements PersonalizeAgentInterface::errors().
   */
  public function errors() {
    $data = $this->getData();
    $is_mvt = isset($data['variation_set_handling']) && $data['variation_set_handling'] == ACQUIA_LIFT_DECISION_MULTIVARIATE;
    if ($is_mvt) {
      return array();
    }
    // If there are multiple option sets, check that they all have the same number
    // of options.
    $option_sets = personalize_option_set_load_by_agent($this->getMachineName());
    $equal_option_counts = TRUE;
    if (count($option_sets) > 1) {
      $first_os = array_shift($option_sets);
      $num_options = count($first_os->options);
      foreach ($option_sets as $os) {
        if (count($os->options) != $num_options) {
          $equal_option_counts = FALSE;
        }
      }
    }
    // Prevent submission if the numbers of options aren't the same.
    if (!$equal_option_counts) {
      // @todo Get proper text for this.
      return array(
        t('You have multiple variation sets with different numbers of variations - the personalization cannot be started until all variation sets have the same number of variations.  Fix this by making sure all variation sets have the same number of variations in the <a href="!what_url">"What" section</a>.', array(
          '!what_url' => url('admin/structure/personalize/manage/' . $this->getMachineName() . '/variations'),
        )),
      );
    }
    return array();
  }

  /**
   * Implements PersonalizeAgentGoalInterface::useClientSideGoalDelivery().
   *
   * @return boolean
   */
  public function useClientSideGoalDelivery() {
    return TRUE;
  }

  /**
   * Implements PersonalizeAgentGoalInterface::sendGoal().
   */
  public function sendGoal($goal_name, $value = NULL) {
    return;
  }
}
