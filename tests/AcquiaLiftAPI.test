<?php

require_once(dirname(__FILE__) . '/../includes/acquia_lift.classes.inc');

/**
 * @file
 * Unit tests for Acquia Lift module.
 */

class AcquiaLiftTest extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Acquia Lift Unit Tests'),
      'description' => t('Unit tests for AcquiaLiftAPI methods.'),
      'group' => t('Personalize'),
    );
  }

  /**
   * @var AcquiaLiftTestLogger
   */
  protected $logger = NULL;

  /**
   * @var DummyAcquiaLiftHttpClient
   */
  protected $httpClient = NULL;

  /**
   * The string to use as the runtime API key.
   *
   * @var string
   */
  protected $liftAPIKey = 'api-key-123';

  /**
   * The string to use as the admin API key.
   *
   * @var string
   */
  protected $liftAdminKey = 'admin-key-123';

  /**
   * The string to use as the owner code.
   *
   * @var string
   */
  protected $liftOwnerCode = 'Some_valid-owner123-code';

  /**
   * Tests getting a AcquiaLiftAPI instance with invalid and valid credentials.
   */
  function testGetInstance() {
    try {
      $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => 'asdf'));
      $this->fail('Should never reach here.');
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftCredsException);
      $this->assertEqual('Acquia Lift account info is not complete.', $e->getMessage());
      try {
        $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => 'asdf', 'admin_key' => 'fasfasfs', 'owner_code' => 'OHAI LOL'));
        $this->fail('Should never reach here.');
      }
      catch (Exception $e) {
        $this->assertTrue($e instanceof AcquiaLiftCredsException);
        $this->assertEqual('Acquia Lift owner code is invalid.', $e->getMessage());
        try {
          // Here we pass valid creds.
          $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => $this->liftAPIKey, 'admin_key' => $this->liftAdminKey, 'owner_code' => $this->liftOwnerCode));
          $lift_api->setLogger(new AcquiaLiftTestLogger());
        }
        catch (Exception $e) {
          $this->fail('Exception thrown when none expected.');
        }
        $this->assertEqual($this->liftAPIKey, $lift_api->getApiKey());
      }
    }
    AcquiaLiftAPI::reset();
  }

  /**
   * Tests getting a AcquiaLiftAPI instance that uses the default API url.
   */
  function testGetInstanceWithAPIUrl() {
    AcquiaLiftAPI::reset();
    try {
      // We don't pass an API url so it should use the default.
      $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => $this->liftAPIKey, 'admin_key' => $this->liftAdminKey, 'owner_code' => $this->liftOwnerCode));
      $lift_api->setLogger(new AcquiaLiftTestLogger());
    }
    catch (Exception $e) {
      $this->fail('Exception thrown when none expected.');
    }
    global $is_https;
    $url_scheme = ($is_https) ? 'https://' : 'http://';
    // Check that the URL is as expected.
    $this->assertEqual($url_scheme . AcquiaLiftAPI::API_URL, $lift_api->getApiUrl());

    AcquiaLiftAPI::reset();
    // Test passing an invalid URL.
    try {
      $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => $this->liftAPIKey, 'admin_key' => $this->liftAdminKey, 'owner_code' => $this->liftOwnerCode, 'api_url' => 'some\\invalid\\url'));
      $this->fail('Should never reach here.');
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftCredsException);
      $this->assertEqual('Acquia Lift API URL is not a valid URL.', $e->getMessage());
    }

    // Test passing a valid URL with no scheme.
    $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => $this->liftAPIKey, 'admin_key' => $this->liftAdminKey, 'owner_code' => $this->liftOwnerCode, 'api_url' => 'test-api.example.com'));
    // The scheme will match whatever the current scheme is.
    global $is_https;
    $url_scheme = ($is_https) ? 'https://' : 'http://';
    // Check that the URL is as expected.
    $this->assertEqual($url_scheme . 'test-api.example.com', $lift_api->getApiUrl());

    AcquiaLiftAPI::reset();
    // Test passing a valid URL with the scheme specified.
    $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => $this->liftAPIKey, 'admin_key' => $this->liftAdminKey, 'owner_code' => $this->liftOwnerCode, 'api_url' => 'https://test-api.example.com'));
    // Check that the URL is as expected.
    $this->assertEqual('https://test-api.example.com', $lift_api->getApiUrl());
    AcquiaLiftAPI::reset();
  }

  /**
   * Test AcquiaLiftAPI->pingTest()
   */
  public function testPingTest() {
    $lift_api = $this->getAcquiaLiftAPI();
    $ping_test = $lift_api->pingTest();
    $this->assertTrue($ping_test);
    $expected = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/list-agents?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array(),
        'body' => NULL,
      )
    );
    $this->assertAPIRequests($expected);
    // Now test with a broken connection.
    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    $ping_test = $lift_api->pingTest();
    $this->assertFALSE($ping_test);
    $this->assertAPIRequests($expected);
  }

  /**
   * Test AcquiaLiftAPI->savePoint()
   */
  public function testSavePoint() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $pointName = 'Some Test Point';

    $lift_api->savePoint($agentName, $pointName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => array()
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The point {decpoint} was pushed to the Acquia Lift campaign {agent}'
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->savePoint($agentName, $pointName);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not save the point {decpoint} to the Acquia Lift campaign {agent}'
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();
  }

  /**
   * Test AcquiaLiftAPI->saveDecision()
   */
  public function testSaveDecision() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $pointName = 'Some Test Point';
    $decisiontName = 'Some Test Decision';

    $lift_api->saveDecision($agentName, $pointName, $decisiontName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/decisions/$decisiontName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision {decname} for point {decpoint} was pushed to the Acquia Lift campaign {agent}'
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();

    $lift_api->saveDecision($agentName, $pointName, $decisiontName, array('key' => 'data'));

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/decisions/$decisiontName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => array('key' => 'data'),
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision {decname} for point {decpoint} was pushed to the Acquia Lift campaign {agent}'
      )
    );

    $this->assertLogs($logs);
    $this->logger->clearLogs();

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->saveDecision($agentName, $pointName, $decisiontName, array('key' => 'data'));
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not save decision {decname} for point {decpoint} to the Acquia Lift campaign {agent}'
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();
  }

  /**
   * Test AcquiaLiftAPI->saveChoice()
   */
  public function testSaveChoice() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $pointName = 'Some Test Point';
    $decisiontName = 'Some Test Decision';
    $choiceName = 'Some Test Choice';

    $lift_api->saveChoice($agentName, $pointName, $decisiontName, $choiceName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/decisions/$decisiontName/choices/$choiceName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision choice {choicename} for point {decpoint} was pushed to the Acquia Lift campaign {agent}',
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();

    $lift_api->saveChoice($agentName, $pointName, $decisiontName, $choiceName, array('key' => 'data'));

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/decisions/$decisiontName/choices/$choiceName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => array('key' => 'data'),
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision choice {choicename} for point {decpoint} was pushed to the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);
    $this->logger->clearLogs();

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->saveChoice($agentName, $pointName, $decisiontName, $choiceName, array('key' => 'data'));
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not save decision choice {choicename} for point {decpoint} to the Acquia Lift campaign {agent}'
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();
  }

  /**
   * Test AcquiaLiftAPI->deletePoint()
   */
  public function testDeletePoint() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $pointName = 'Some Test Point';

    $lift_api->deletePoint($agentName, $pointName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'delete',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName?apikey={$lift_api->getAdminKey()}",
        'headers' => NULL,
        'options' => array(),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision point {decpoint} was deleted from the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->deletePoint($agentName, $pointName);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not delete decision point {decpoint} from the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->deleteDecision()
   */
  public function testDeleteDecision() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $pointName = 'Some Test Point';
    $decisiontName = 'Some Test Decision';

    $lift_api->deleteDecision($agentName, $pointName, $decisiontName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'delete',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/decisions/$decisiontName?apikey={$lift_api->getAdminKey()}",
        'headers' => NULL,
        'options' => array(),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision {decname} for point {decpoint} was deleted from the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->deleteDecision($agentName, $pointName, $decisiontName);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not delete decision {decname} for point {decpoint} from the Acquia Lift campaign {agent}',
      )
    );
    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->deleteChoice()
   */
  public function testDeleteChoice() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $pointName = 'Some Test Point';
    $decisiontName = 'Some Test Decision';
    $choiceName = 'Some Test Choice';

    $lift_api->deleteChoice($agentName, $pointName, $decisiontName, $choiceName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'delete',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/decisions/$decisiontName/choices/$choiceName?apikey={$lift_api->getAdminKey()}",
        'headers' => NULL,
        'options' => array(),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The decision choice {choicename} for point {decpoint} was deleted from the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->deleteChoice($agentName, $pointName, $decisiontName, $choiceName);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not delete decision choice {choicename} for point {decpoint} from the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->saveGoal()
   */
  public function testSaveGoal() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-test-agent';
    $goalName = 'Some Test Point';
    $data = array('key' => 'value');

    $lift_api->saveGoal($agentName, $goalName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/goals/$goalName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The goal {goal} was pushed to the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);

    // Try to pass data structure
    $lift_api->saveGoal($agentName, $goalName, $data);

    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/goals/$goalName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => $data,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The goal {goal} was pushed to the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->saveGoal($agentName, $goalName, $data);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not save the goal {goal} to the Acquia Lift campaign {agent}',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getAgent()
   */
  public function testGetAgent() {
    $lift_api = $this->getAcquiaLiftAPI();

    $machineName = 'some_machine_name';

    $lift_api->getAgent($machineName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$machineName?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    $lift_api->getAgent($machineName);
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getGoalsForAgent()
   */
  public function testGetGoalsForAgent() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some_machine_name';

    $lift_api->getGoalsForAgent($agentName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/goals?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    $lift_api->getGoalsForAgent($agentName);
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getPointsForAgent()
   */
  public function testGetPointsForAgent() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some_machine_name';

    $lift_api->getPointsForAgent($agentName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    $lift_api->getPointsForAgent($agentName);
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getDecisionsForPoint()
   */
  public function testGetDecisionsForPoint() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some_machine_name';
    $pointName = 'some_point_name';

    $lift_api->getDecisionsForPoint($agentName, $pointName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/{$pointName}/decisions?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    $lift_api->getDecisionsForPoint($agentName, $pointName);
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getChoicesForDecision()
   */
  public function testGetChoicesForDecision() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some_machine_name';
    $pointName = 'some_point_name';
    $decisionName = 'some_decision_name';

    $lift_api->getChoicesForDecision($agentName, $pointName, $decisionName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/{$pointName}/decisions/{$decisionName}/choices?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    $lift_api->getChoicesForDecision($agentName, $pointName, $decisionName);
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getExistingAgents()
   */
  public function testGetExistingAgents() {
    $lift_api = $this->getAcquiaLiftAPI();

    $lift_api->getExistingAgents();

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/list-agents?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->getExistingAgents();
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Error retrieving agent list from Acquia Lift',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getTransformOptions()
   */
  public function testGetTransformOptions() {
    $lift_api = $this->getAcquiaLiftAPI();

    $lift_api->getTransformOptions();

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/transforms-options?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->getTransformOptions();
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Error retrieving list of transforms options',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->saveAutoTargetingRule()
   */
  public function testSaveAutoTargetingRule() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-agent-name';
    $autoFeatures = array('first', 'second', 'third');

    $lift_api->saveAutoTargetingRule($agentName, $autoFeatures);

    $processedAutoFeatures = array();

    foreach ($autoFeatures as $key => $feature) {
      $processedAutoFeatures[$key] = '#' . $feature;
    }

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'post',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/transform-rule?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => array(
          'code' => $agentName . '-auto-targeting',
          'status' => 1,
          'agents' => array($agentName),
          'when' => array(),
          'apply' => array(
            'feature' => implode(',', $processedAutoFeatures),
          )
        ),
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The targeting rule for campaign {agent} was saved successfully',
      )
    );

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->saveAutoTargetingRule($agentName, $autoFeatures);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }


    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'The targeting rule could not be saved for campaign {agent}',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getPotentialTargetingValues()
   */
  public function testGetPotentialTargetingValues() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-agent-name';

    $lift_api->getPotentialTargetingValues($agentName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/-/potential-targeting?agent={$agentName}&include-current=true&apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);

    try {
      $lift_api->getPotentialTargetingValues($agentName);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Problem retrieving potential targeting values',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->saveFixedTargetingMapping()
   */
  public function testSaveFixedTargetingMapping() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-agent-name';
    $pointName = 'some-point-name';
    $map = array(
      'key' => 'data',
    );

    $lift_api->saveFixedTargetingMapping($agentName, $pointName, $map);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/agent-api/$agentName/points/$pointName/fixed-targeting?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => $map,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The fixed targeting mapping for point {decpoint} was successfully saved for campaign {agent}'
      ),
    );

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);

    try {
      $lift_api->saveFixedTargetingMapping($agentName, $pointName, $map);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'The fixed targeting mapping for point {decpoint} could not be saved for campaign {agent}',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getTargetingImpactReport()
   * @todo test with 'point' value
   */
  public function testGetTargetingImpactReport() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-agent-name';
    $dateStr = date('Y-m-d');
    $lift_api->getTargetingImpactReport($agentName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/{$agentName}/report/targeting-features/{$dateStr}?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $startDate = '2014-01-01';
    $endDate = '2014-01-02';
    $lift_api->getTargetingImpactReport($agentName, $startDate, $endDate);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/{$agentName}/report/targeting-features/{$startDate}/$endDate?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);

    try {
      $lift_api->getTargetingImpactReport($agentName, $startDate, $endDate);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Problem retrieving targeting impact report.',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getAgentStatusReport()
   */
  public function testGetAgentStatusReportg() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentNamesArray = array('some-agent-name', 'some-another-name');
    $agentNames = 'some-agent-name,some-another-name';
    $dayNumber = 10;

    $lift_api->getAgentStatusReport($agentNamesArray, $dayNumber);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/report/status?codes={$agentNames}&days={$dayNumber}&apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);

    try {
      $lift_api->getAgentStatusReport($agentNamesArray, $dayNumber);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Problem retrieving targeting impact report.',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getConfidenceReport()
   * @todo test with 'point' value
   */
  public function testGetConfidenceReport() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-agent-name';
    $dateStr = date('Y-m-d');
    $lift_api->getConfidenceReport($agentName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/{$agentName}/report/confidence/{$dateStr}?features=(none)&apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $startDate = '2014-01-01';
    $endDate = '2014-01-02';
    $lift_api->getConfidenceReport($agentName, $startDate, $endDate);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/{$agentName}/report/confidence/{$startDate}/$endDate?features=(none)&apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);

    try {
      $lift_api->getConfidenceReport($agentName, $startDate, $endDate);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Problem retrieving confidence report.',
      )
    );

    $this->assertLogs($logs);
  }

  /**
   * Test AcquiaLiftAPI->getRawLearningReport()
   * @todo test with 'point' value
   */
  public function testGetRawLearningReport() {
    $lift_api = $this->getAcquiaLiftAPI();

    $agentName = 'some-agent-name';
    $dateStr = date('Y-m-d');
    $lift_api->getRawLearningReport($agentName);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/{$agentName}/report/learning/{$dateStr}?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $startDate = '2014-01-01';
    $endDate = '2014-01-02';
    $lift_api->getRawLearningReport($agentName, $startDate, $endDate);

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'get',
        'uri' => "{$lift_api->getApiUrl()}/{$lift_api->getOwnerCode()}/{$agentName}/report/learning/{$startDate}/$endDate?apikey={$lift_api->getAdminKey()}",
        'headers' => array('Accept' => 'application/json'),
        'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
        'body' => NULL,
      )
    );

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array();

    $this->assertLogs($logs);

    $lift_api = $this->getAcquiaLiftAPI(TRUE);

    try {
      $lift_api->getRawLearningReport($agentName, $startDate, $endDate);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }

    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);

    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Problem retrieving learning report.',
      )
    );

    $this->assertLogs($logs);
  }

  function testSaveAgent() {
    $lift_api = $this->getAcquiaLiftAPI();
    $lift_api->saveAgent('some-test-agent', 'Some Test Agent', 'adaptive', 'enabled');
    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "http://api.lift.acquia.com/{$this->liftOwnerCode}/agent-api/some-test-agent?apikey={$this->liftAdminKey}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => array(
          'name' => 'Some Test Agent',
          'selection-mode' => 'adaptive',
          'status' => 'enabled',
          'control-rate' => 0.1,
          'explore-rate' => 0.2,
        )
      )
    );
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);
    // Confirm the expected messages were logged.
    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The campaign {agent} was pushed to Acquia Lift',
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();

    $lift_api->saveAgent('some-test-agent', 'Some Test Agent', 'adaptive', 'enabled', 0.1, 0.4);
    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'put',
        'uri' => "http://api.lift.acquia.com/{$this->liftOwnerCode}/agent-api/some-test-agent?apikey={$this->liftAdminKey}",
        'headers' => array('Content-Type' => 'application/json; charset=utf-8', 'Accept' => 'application/json'),
        'options' => array(),
        'body' => array(
          'name' => 'Some Test Agent',
          'selection-mode' => 'adaptive',
          'status' => 'enabled',
          'control-rate' => 0.1,
          'explore-rate' => 0.4,
        )
      )
    );
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);
    $this->assertLogs($logs);
    $this->logger->clearLogs();

    // Now try with a broken http client.
    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->saveAgent('some-test-agent', 'Some Test Agent', 'adaptive', 'enabled', 0.1, 0.4);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }
    // The same requests should be made.
    $this->assertAPIRequests($requests);
    // Confirm the expected error message was logged.
    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'The campaign {agent} could not be pushed to Acquia Lift',
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();
  }

  function testGetAgents() {
    $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => 'asdf', 'admin_key' => 'fasfasfs', 'owner_code' => 'Some_valid-owner123-code'));
    // Pass some dummy agent data to our dummy http client and
    // confirm that we get it back via the getExistingAgents()
    // method on the the AcquiaLiftAPI class.
    $agents = array();
    $agent_codes = array('first-agent', 'second-agent');
    foreach ($agent_codes as $code) {
      $agent = new stdClass();
      $agent->code = $code;
      $agent->decisions = array();
      $agent->goals = array();
      $agents[] = $agent;
    }

    $lift_api->setHttpClient(new DummyAcquiaLiftHttpClient(FALSE, array('agents' => $agents)));
    $lift_api->setLogger(new AcquiaLiftTestLogger());
    $agents = $lift_api->getExistingAgents();
    $this->assertEqual($agent_codes, array_keys($agents));
    // Simulate no agents being returned by the service.
    $lift_api->setHttpClient(new DummyAcquiaLiftHttpClient(FALSE));
    $agents = $lift_api->getExistingAgents();
    $this->assertTrue(empty($agents));
    // Now try with a broken httpclient (simulating a 500 response from the service).
    $lift_api->setHttpClient(new DummyAcquiaLiftHttpClient(TRUE));
    try {
      $agents = $lift_api->getExistingAgents();
      $this->fail('Should never reach here');
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
      $this->assertEqual('Error retrieving agent list from Acquia Lift', $e->getMessage());
    }
  }

  function testGetPossibleValues() {
    $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => 'asdf', 'admin_key' => 'fasfasfs', 'owner_code' => 'Some_valid-owner123-code'));
    $lift_api->setLogger(new AcquiaLiftTestLogger());
    // Pass some dummy feature codes to our dummy http client.
    $features = array(
      array(
        'code' => '(none)',
        'name' => '(Any Visitor)',
      ),
      array(
        'code' => 'first-mutex: Some Value',
        'name' => 'Some Friendly Name',
        'typeName' => 'First Mutex'
      ),
      array(
        'code' => 'first-mutex: Other Value',
        'name' => 'Other Friendly Name',
        'typeName' => 'First Mutex'
      ),
      array(
        'code' => 'first-non-mutex:: Some Nonmutex Value',
        'name' => 'Some Friendly Nonmutex Name',
        'typeName' => 'First Non-Mutex'
      ),
      array(
        'code' => 'first-non-mutex:: Other Nonmutex Value',
        'name' => 'Other Friendly Nonmutex Name',
        'typeName' => 'First Non-Mutex'
      ),
    );

    $lift_api->setHttpClient(new DummyAcquiaLiftHttpClient(FALSE, array('features' => $features)));
    $possible_values = $lift_api->getPossibleValues('some-agent', ':', '::');
    $expected = array(
      'first-mutex' => array(
        'mutex' => TRUE,
        'friendly name' => 'First Mutex',
        'values' => array(
          'Some Value' => 'Some Friendly Name',
          'Other Value' => 'Other Friendly Name'
        )
      ),
      'first-non-mutex' => array(
        'mutex' => FALSE,
        'friendly name' => 'First Non-Mutex',
        'values' => array(
          'Some Nonmutex Value' => 'Some Friendly Nonmutex Name',
          'Other Nonmutex Value' => 'Other Friendly Nonmutex Name'
        )
      )
    );
    $this->assertEqual($expected, $possible_values);
    // If the mutex vs non-mutex separators were ever to change, the getPossibleValues()
    // method should still work fine.
    $features = array(
      array(
        'code' => '(none)',
        'name' => '(Any Visitor)',
      ),
      array(
        'code' => 'first-mutex:: Some Value',
        'name' => 'Some Friendly Name',
        'typeName' => 'First Mutex'
      ),
      array(
        'code' => 'first-mutex:: Other Value',
        'name' => 'Other Friendly Name',
        'typeName' => 'First Mutex'
      ),
      array(
        'code' => 'first-non-mutex: Some Nonmutex Value',
        'name' => 'Some Friendly Nonmutex Name',
        'typeName' => 'First Non-Mutex'
      ),
      array(
        'code' => 'first-non-mutex: Other Nonmutex Value',
        'name' => 'Other Friendly Nonmutex Name',
        'typeName' => 'First Non-Mutex'
      ),
    );

    $lift_api->setHttpClient(new DummyAcquiaLiftHttpClient(FALSE, array('features' => $features)));
    // We switch around the mutex and non-mutex separators so it can handle this change.
    $possible_values = $lift_api->getPossibleValues('some-agent', '::', ':');
    // We still expect the exact same set of values to be returned.
    $this->assertEqual($expected, $possible_values);
  }

  /**
   * Test the testGetCallsForPreviousMonth() method.
   */
  public function testGetCallsForPreviousMonth() {
    $lift_api = $this->getAcquiaLiftAPI();
    $timestamps = array(
      // Timestamp representing March 12th 2014
      1394652611 => array(
        'start' => '2014-02-01',
        'end' => '2014-02-28'
      ),
      // Timestamp representing January 2nd 2014
      1388695528 => array(
        'start' => '2013-12-01',
        'end' => '2013-12-31'
      ),
      // Timestamp representing December 31st 2013
      1388522626 => array(
        'start' => '2013-11-01',
        'end' => '2013-11-30'
      ),
      // Timestamp representing October 9th 2013
      1381348094 => array(
        'start' => '2013-09-01',
        'end' => '2013-09-30'
      )
    );
    foreach ($timestamps as $timestamp => $expected_dates) {
      $count = $lift_api->getCallsForPreviousMonth($timestamp);
      // Define the requests we expect to have been made to our dummy http
      // client for this operation.
      $requests = array(
        array(
          'type' => 'get',
          'uri' => "http://api.lift.acquia.com/{$this->liftOwnerCode}/-/report/system-usage/{$expected_dates['start']}/{$expected_dates['end']}?apikey={$this->liftAdminKey}",
          'headers' => array('Accept' => 'application/json'),
          'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
          'body' => NULL,
        )
      );
      // Confirm the expected requests were made.
      $this->assertAPIRequests($requests);
    }
  }

  /**
   * Test the testGetCallsForPreviousMonth() method.
   */
  public function testGetCallsForMonthToDate() {
    $lift_api = $this->getAcquiaLiftAPI();
    $timestamps = array(
      // Timestamp representing March 12th 2014
      1394652611 => array(
        'start' => '2014-03-01',
        'end' => '2014-03-12'
      ),
      // Timestamp representing January 2nd 2014
      1388695528 => array(
        'start' => '2014-01-01',
        'end' => '2014-01-02'
      ),
      // Timestamp representing December 31st 2013
      1388522626 => array(
        'start' => '2013-12-01',
        'end' => '2013-12-31'
      ),
    );
    foreach ($timestamps as $timestamp => $expected_dates) {
      $count = $lift_api->getCallsForMonthToDate($timestamp);
      // Define the requests we expect to have been made to our dummy http
      // client for this operation.
      $requests = array(
        array(
          'type' => 'get',
          'uri' => "http://api.lift.acquia.com/{$this->liftOwnerCode}/-/report/system-usage/{$expected_dates['start']}/{$expected_dates['end']}?apikey={$this->liftAdminKey}",
          'headers' => array('Accept' => 'application/json'),
          'options' => array('timeout' => AcquiaLiftAPI::GET_REQUEST_TIMEOUT_VALUE),
          'body' => NULL,
        )
      );
      // Confirm the expected requests were made.
      $this->assertAPIRequests($requests);
    }
  }

  public function testResetAgentData() {
    $lift_api = $this->getAcquiaLiftAPI();
    $agent_name = 'my-test-agent';
    try {
      $lift_api->resetAgentData($agent_name);
    }
    catch (Exception $e) {
      $this->fail('Exception thrown when none expected');
    }

    // Define the requests we expect to have been made to our dummy http
    // client for this operation.
    $requests = array(
      array(
        'type' => 'delete',
        'uri' => "http://api.lift.acquia.com/{$this->liftOwnerCode}/my-test-agent/data?apikey={$this->liftAdminKey}",
        'headers' => NULL,
        'options' => array(),
        'body' => NULL
      )
    );
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);
    // Confirm the expected messages were logged.
    $logs = array(
      array(
        'level' => PersonalizeLogLevel::INFO,
        'message' => 'The data for Acquia Lift campaign {agent} was reset',
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();

    // Now try with a broken http client.
    $lift_api = $this->getAcquiaLiftAPI(TRUE);
    try {
      $lift_api->resetAgentData($agent_name);
    }
    catch (Exception $e) {
      $this->assertTrue($e instanceof AcquiaLiftException);
    }
    // Confirm the expected requests were made.
    $this->assertAPIRequests($requests);
    // Confirm the expected messages were logged.
    $logs = array(
      array(
        'level' => PersonalizeLogLevel::ERROR,
        'message' => 'Could not reset data for Acquia Lift campaign {agent}',
      )
    );
    $this->assertLogs($logs);
    $this->logger->clearLogs();
  }

  function testEnsureUniqueAgentName() {
    $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => 'asdf', 'admin_key' => 'fasfasfs', 'owner_code' => 'Some_valid-owner123-code'));
    // Pass some dummy agent data to our dummy http client.
    $agents = array();
    $agent_codes = array(
      'first-agent',
      'first-agent-0',
      'first-agent-1',
      'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx',
      'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv-0',
      'abcdefghijklmnopqrstuvwxyzabcdef',
      'abcdefghijklmnopqrstuvwxyzabcd-0',
      'abcdefghijklmnopqrstuvwxyzabcd-1',
      'abcdefghijklmnopqrstuvwxyzabcd-2',
      'abcdefghijklmnopqrstuvwxyzabcd-3',
      'abcdefghijklmnopqrstuvwxyzabcd-4',
      'abcdefghijklmnopqrstuvwxyzabcd-5',
      'abcdefghijklmnopqrstuvwxyzabcd-6',
      'abcdefghijklmnopqrstuvwxyzabcd-7',
      'abcdefghijklmnopqrstuvwxyzabcd-8',
      'abcdefghijklmnopqrstuvwxyzabcd-9',
    );
    foreach ($agent_codes as $code) {
      $agent = new stdClass();
      $agent->code = $code;
      $agent->decisions = array();
      $agent->goals = array();
      $agents[] = $agent;
    }

    $lift_api->setHttpClient(new DummyAcquiaLiftHttpClient(FALSE, array('agents' => $agents)));
    $lift_api->setLogger(new AcquiaLiftTestLogger());
    // Try to get a unique name based on 'first-agent'
    $new_name = $lift_api->ensureUniqueAgentName($agent_codes[0], 64);
    $this->assertEqual('first-agent-2', $new_name);
    // Try to get a unique name based on a long string.
    $new_name = $lift_api->ensureUniqueAgentName('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 64);
    $this->assertEqual('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv-1', $new_name);

    // Now try with a max length restriction that is shorter than the one
    // for Acquia Lift
    $new_name = $lift_api->ensureUniqueAgentName('abcdefghijklmnopqrstuvwxyzabcde1f', 32);
    $this->assertEqual('abcdefghijklmnopqrstuvwxyzabcde1', $new_name);
    $new_name = $lift_api->ensureUniqueAgentName('abcdefghijklmnopqrstuvwxyzabcdef', 32);
    $this->assertEqual('abcdefghijklmnopqrstuvwxyzabc-10', $new_name);

  }

  /**
   * Returns a AcquiaLiftAPI instance that can be used to test methods.
   *
   * @param bool $broken
   *   Whether the HTTP client used by the API class should be broken, simulating
   *   500 responses from Acquia Lift.
   * @return AcquiaLiftAPI
   *   A AcquiaLiftAPI instance.
   */
  protected function getAcquiaLiftAPI($broken = FALSE) {
    $lift_api = AcquiaLiftAPI::getInstance(array('api_key' => $this->liftAPIKey, 'admin_key' => $this->liftAdminKey, 'owner_code' => $this->liftOwnerCode));
    // Create a dummy http client for the Acquia Lift API to use. All
    // requests to it will be logged and retrievable for checking later.
    $this->httpClient = new DummyAcquiaLiftHttpClient($broken);
    $lift_api->setHttpClient($this->httpClient);
    if ($this->logger === NULL) {
      // Create a dummy logger instance which will maintain a log in memory
      // that we can retrieve for checking later.
      $this->logger = new AcquiaLiftTestLogger();
    }
    $lift_api->setLogger($this->logger);
    return $lift_api;
  }

  /**
   * Asserts that the expected requests were made to the http client.
   *
   * @param $expected_requests
   */
  protected function assertAPIRequests($expected_requests) {
    $logged_requests = $this->httpClient->getLoggedRequests();
    $this->assertEqual($expected_requests, $logged_requests);
    $this->httpClient->removeLoggedRequests();
  }

  /**
   * Asserts that the expected messages were logged to the logger.
   *
   * @param $expected_logs
   */
  protected function assertLogs($expected_logs) {
    $logs = $this->logger->getLogs();
    $this->assertEqual($expected_logs, $logs);
    $this->logger->clearLogs();
  }

}
