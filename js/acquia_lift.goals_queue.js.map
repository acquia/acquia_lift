{"version":3,"sources":["../src/js/agent/acquia_lift.utility.queue.js","../src/js/agent/acquia_lift.agent.goal_queue.js"],"names":[],"mappings":"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","file":"acquia_lift.goals_queue.js","sourcesContent":["/**\n * Utility functions for stateless queue cookie processing.\n *\n * Functionality includes basic read/write functionality.\n */\n(function ($, Drupal) {\n  \"use strict\";\n\n  Drupal.acquiaLiftUtility = Drupal.acquiaLiftUtility || {};\n\n  Drupal.acquiaLiftUtility.QueueItem = function (params) {\n    var queueItemUid,\n      queueItemData,\n      queueItemProcessing = false,\n      numberTried = 0;\n\n    /**\n     * Returns the unique ID assigned to this queue item.\n     */\n    this.getId = function () {\n      return queueItemUid;\n    };\n\n    /**\n     * Sets the unique ID assigned to this queue item.\n     */\n    this.setId = function (value) {\n      queueItemUid = value;\n    }\n\n    /**\n     * Returns the data that is held by this queue item.\n     */\n    this.getData = function () {\n      return queueItemData;\n    };\n\n    /**\n     * Setter for the data held by this queue item.\n     */\n    this.setData = function (value) {\n      queueItemData = value;\n    }\n;\n    /**\n     * Determines if this queue item is currently processing.\n     */\n    this.isProcessing = function () {\n      return queueItemProcessing;\n    };\n\n    /**\n     * Setter for the processing flag for this queue item.\n     */\n    this.setProcessing = function (isProcessing) {\n      queueItemProcessing = isProcessing;\n    };\n\n    /**\n     * Gets the number of times this item has been tried in the queue.\n     */\n    this.getNumberTried = function () {\n      return numberTried;\n    };\n\n    /**\n     * Sets the number of times this item has been tried in the queue.\n     */\n    this.setNumberTried = function (value) {\n      numberTried = value;\n    };\n\n    /**\n     * Increments the number of times this item has been tried.\n     */\n    this.incrementTries = function () {\n      numberTried++;\n    };\n\n    // Constructor handling.\n    if (params.hasOwnProperty('id')\n      && params.hasOwnProperty('data')\n      && params.hasOwnProperty('pflag')\n      && params.hasOwnProperty('numberTried')) {\n      this.setId(params.id);\n      this.setData(params.data);\n      this.setProcessing(params.pflag);\n      this.setNumberTried(params.numberTried);\n    } else {\n      var uid = 'acquia-lift-ts-' + new Date().getTime() + Math.random();\n      this.setId(uid);\n      this.setData(params);\n      this.setProcessing(false);\n      this.setNumberTried(0);\n    }\n  };\n\n  Drupal.acquiaLiftUtility.QueueItem.prototype = {\n    constructor: Drupal.acquiaLiftUtility.QueueItem,\n\n    /**\n     * Determines if QueueItem is equal to the current QueueItem.\n     *\n     * @param queueItem\n     *   The item to check against.\n     * @returns\n     *   True if equal, false if unequal.\n     */\n    'equals': function (queueItem) {\n      return (queueItem instanceof Drupal.acquiaLiftUtility.QueueItem && queueItem.getId() == this.getId());\n    },\n\n    /**\n     * Resets the processing flag on this queue item.\n     */\n    'reset': function() {\n      this.setProcessing(false);\n    },\n\n    /**\n     * Parses the QueueItem into a simple object.\n     */\n    'toObject': function () {\n      return {\n        'id': this.getId(),\n        'data': this.getData(),\n        'pflag': this.isProcessing(),\n        'numberTried': this.getNumberTried()\n      };\n    }\n  }\n\n  Drupal.acquiaLiftUtility.Queue = Drupal.acquiaLiftUtility.Queue || (function($) {\n    // @todo: Would be cool if we could swap out back-ends to local storage or\n    // other mechanism.\n\n    var cookieName = 'acquiaLiftQueue', maxRetries = 5;\n\n    /**\n     * Indicates if the cookie handling script handles object serialization.\n     * This is not available in the jquery.cookie.js version that ships with\n     * Drupal 7 but some installations use a later version.\n     *\n     * @return boolean\n     *   True if cookie handles serialization, false if data must be manually\n     *   serialized before writing.\n     */\n    function cookieHandlesSerialization() {\n      return ($.cookie.json && $.cookie.json == true);\n    }\n\n    /**\n     * Reads the queue from storage.\n     *\n     * @returns array\n     *   An array of QueueItems.\n     */\n    function readQueue() {\n      var queue = $.cookie(cookieName);\n      var unserialized = cookieHandlesSerialization() ? queue : $.parseJSON(queue);\n      return $.isArray(unserialized) ? unserialized : [];\n    }\n\n    /**\n     * Returns a fully-parsed queue.\n     */\n    function getAll() {\n      var unserialized = readQueue(), i, num = unserialized.length, queue = [];\n      for (i = 0; i < num; i++) {\n        queue.push(new Drupal.acquiaLiftUtility.QueueItem(unserialized[i]));\n      }\n      return queue;\n    }\n\n    /**\n     * Returns the first unprocessed QueueItem.\n     */\n    function getFirstUnprocessed() {\n      var unserialized = readQueue(), i, num = unserialized.length, item;\n      for (i = 0; i < num; i++) {\n        item = new Drupal.acquiaLiftUtility.QueueItem(unserialized[i]);\n        if (!item.isProcessing()) {\n          return item;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Find index of a QueueItem within the Queue.\n     *\n     * @param queue\n     *   An instance of the queue to search.\n     * @param item\n     *   The QueueItem to find within the queue.\n     * @return int\n     *   The index of the item in the queue or -1 if not found.\n     */\n    function indexOf(queue, item) {\n      var i,\n        num = queue.length,\n        test;\n      // Only initialize as many as we have to in order to find a match.\n      for (i = 0; i < num; i++) {\n        test = new Drupal.acquiaLiftUtility.QueueItem(queue[i]);\n        if (test.equals(item)) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n\n    /**\n     * Writes the queue to storage.\n     *\n     * @param array\n     *   The queue as an array.\n     */\n    function writeQueue(queue) {\n      var queueData = [], i, num = queue.length;\n\n      // Prepare the queue by making sure all items to save are simple objects.\n      for (i = 0; i < num; i++) {\n        if (queue[i] instanceof Drupal.acquiaLiftUtility.QueueItem) {\n          queueData.push(queue[i].toObject())\n        } else {\n          queueData.push(queue[i]);\n        }\n      }\n      // Serialize if necessary.\n      if (!cookieHandlesSerialization()) {\n        queueData = JSON.stringify(queueData);\n      }\n      // Write to the cookie.\n      $.cookie(cookieName, queueData);\n    }\n\n    /**\n     * Adds an existing QueueItem back to the queue for re-processing.\n     *\n     * @param queueItem\n     *   The item to add back into the queue.\n     * @param reset\n     *   Boolean indicates if the processing flag should be reset, defaults\n     *   false.\n     */\n    function addBack(queueItem, reset) {\n      var queue = readQueue();\n      var index = indexOf(queue, queueItem);\n\n      if (reset && reset == true) {\n        queueItem.reset();\n        queueItem.incrementTries();\n      }\n      if (queueItem.getNumberTried() >= maxRetries) {\n        // This item is beyond the maximum number of tries and should be\n        // removed from the queue so don't add it back.\n        Drupal.acquiaLiftUtility.Queue.remove(queueItem);\n        return;\n      }\n      if (index >= 0) {\n        queue.splice(index, 1, queueItem);\n      } else {\n        queue.push(queueItem);\n      }\n      writeQueue(queue);\n    };\n\n    /**\n     * Publicly accessible queue methods.\n     */\n    return {\n      /**\n       * Adds a QueueItem to the queue.\n       *\n       * The item can be new data to add, a new QueueItem to add, or an\n       * existing QueueItem to return to the queue for re-processing.\n       *\n       * @param data\n       *   Data or a QueueItem to add to the queue.\n       * @param reset\n       *   Indicates if the processing should be reset (defaults to true).\n       */\n      'add': function (data, reset) {\n        reset = reset == undefined ? true : reset;\n\n        if (data instanceof Drupal.acquiaLiftUtility.QueueItem) {\n          addBack(data, reset);\n          return;\n        }\n        var queue = readQueue();\n        queue.push(new Drupal.acquiaLiftUtility.QueueItem(data));\n        writeQueue(queue);\n      },\n\n      /**\n       * Gets the next unprocessed item in the queue for processing.\n       * @returns a queueItem or null;\n       *   The queueItem.\n       */\n      'getNext': function () {\n        var item = getFirstUnprocessed();\n        if (item) {\n          item.setProcessing(true);\n          // Save the updated item back into the queue (will overwrite).\n          this.add(item, false);\n        }\n        return item;\n      },\n\n      /**\n       * Removes a queueItem from the processing queue.\n       *\n       * @param queueItem\n       *   The item to remove.\n       * @returns\n       *   True if the item was found to remove, false if not found.\n       */\n      'remove': function (queueItem) {\n        var queue = readQueue();\n        var index = indexOf(queue, queueItem);\n        if (index >= 0) {\n          queue.splice(index, 1);\n          writeQueue(queue);\n          return true;\n        }\n        return false;\n      },\n\n      /**\n       * Resets the processing status on all items in the queue.\n       */\n      'reset': function () {\n        var i,\n          queue = getAll(),\n          num = queue.length;\n        for (i = 0; i < num; i++) {\n          queue[i].reset();\n        }\n        writeQueue(queue);\n      },\n\n      /**\n       * Empties the queue of all options (typcially used for testing purposes).\n       */\n      'empty': function () {\n        writeQueue([]);\n      }\n    }\n  }($));\n\n}(Drupal.jQuery, Drupal));\n","/**\n * Acquia Lift goals processing queue functions.\n */\n\n(function ($, Drupal) {\n  \"use strict\";\n\n  Drupal.acquiaLiftUtility = Drupal.acquiaLiftUtility || {};\n  Drupal.acquiaLiftUtility.GoalQueue = Drupal.acquiaLiftUtility.GoalQueue || (function($) {\n\n    var acquiaLiftAPI;\n\n    /**\n     * Converts the data for a goal into the format for saving in the queue.\n     *\n     * @param goal\n     *   An object with the following keys:\n     *   - agentName: The name of the agent for this gaol\n     *   - options: An object of goal options to be sent with the goal.\n     * @return object\n     *   A simple object of data to be saved.\n     */\n    function convertGoalToQueueData(goal) {\n      return {'a': goal.agentName, 'o': goal.options};\n    }\n\n    /**\n     * Converts the queue data into the data for a goal.\n     *\n     * @param item\n     *   The queue item data.\n     * @return object\n     *   An object with the following keys:\n     *   - agentName: The name of the agent for this gaol\n     *   - options: An object of goal options to be sent with the goal.\n     */\n    function convertQueueDataToGoal(item) {\n      if (!item.a || !item.o) {\n        return {};\n      }\n      // Make a deep copy of the object data as the goal data will be\n      // transformed and updated by the API call.\n      return {\n        'agentName': item.a,\n        'options': $.extend(true, {}, item.o)\n      };\n    }\n\n    /**\n     * Processes a goal QueueItem through the Acquia Lift service.\n     *\n     * @param queueItem\n     *   The item to process.\n     * @param callback\n     *   A callback function to be used for notification when processing is\n     *   complete.  The callback will receive:\n     *   - an instance of the QueueItem processed\n     *   - a boolean indicating if the processing was successful.\n     */\n    function processGoalItem(queueItem, callback) {\n      var api = Drupal.acquiaLiftAPI.getInstance();\n      var goal = convertQueueDataToGoal(queueItem.getData());\n      if (!goal.agentName || !goal.options) {\n        throw new Error('Invalid goal data.');\n      }\n      api.goal(goal.agentName, goal.options, function(accepted, session, retryable) {\n        if (callback && typeof callback === 'function') {\n          callback(queueItem, accepted, session, retryable);\n        }\n      });\n      if (api.isManualBatch()) {\n        api.batchSend();\n      }\n    }\n\n    return {\n      /**\n       * Adds goal data to the persistent queue.\n       *\n       * @param agentName\n       *   The name of the agent for the goal.\n       * @param options\n       *   Goal options to send with the goal.\n       *  @param process\n       *    Boolean indicating if goals should be immediately processed,\n       *    defaults to true.\n       */\n      'addGoal': function (agentName, options, process) {\n        var data = convertGoalToQueueData({'agentName': agentName, 'options': options});\n        var process = process == undefined ? true : process;\n        // Add the data to the persistent queue.\n        Drupal.acquiaLiftUtility.Queue.add(data);\n        // Now attempt to process the queue.\n        if (process) {\n          this.processQueue();\n        }\n      },\n\n      /**\n       * Process the queue by sending goals to the Acquia Lift agent.\n       *\n       * @param reset\n       *   (Optional) True if the queue should be reset such that all items are\n       *   tried (such as in an initial processing for the page request).\n       */\n      'processQueue': function (reset) {\n        reset = reset || false;\n        // The processing status should be reset upon the initial page load.\n        if (reset) {\n          Drupal.acquiaLiftUtility.Queue.reset();\n        }\n\n        var failed = [];\n\n        // Function to kick off the processing for the next goal.\n        function processNext () {\n          var item = Drupal.acquiaLiftUtility.Queue.getNext();\n          if (item) {\n            try {\n              processGoalItem(item, processComplete);\n            }\n            catch (e) {\n              // If there was an exception, then this goal data cannot be\n              // processed so remove it and move on.\n              Drupal.acquiaLiftUtility.Queue.remove(item);\n              processNext();\n            }\n          } else {\n            // We are all done with processing the queue.  Add back in any\n            // failures to try again the next time the queue is processed.\n            var i, num = failed.length;\n            for (i = 0; i < num; i++) {\n              Drupal.acquiaLiftUtility.Queue.add(failed[i]);\n            }\n          }\n        }\n\n        // Callback for when a single goal processing call is complete.\n        function processComplete (item, accepted, session, retryable) {\n          if (!accepted && retryable) {\n            failed.push(item);\n          } else {\n            Drupal.acquiaLiftUtility.Queue.remove(item)\n          }\n          processNext();\n        }\n        // Kick off the queue.\n        processNext();\n      }\n    }\n  }($));\n\n\n}(Drupal.jQuery, Drupal));\n"]}